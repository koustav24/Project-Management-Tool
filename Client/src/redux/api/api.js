import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'


const api=createApi({
    reducerPath:"api",
    baseQuery:fetchBaseQuery({baseUrl:"http://localhost:3000/"}),
    tagTypes:['User','Tasks','Projects','Chat','Comment'],
    endpoints:(builder)=>({
        getAllMembers:builder.query({
            query:()=>({
                url:'members',
                credentials:"include"
            }),
            providesTags: ['User']
        }),
        addNewProject:builder.mutation({
            query:(newProject)=>({
                url:'projects/NewProjects',
                method:'POST',
                credentials:'include',
                body:newProject,
                
            }),
            invalidatesTags:['Projects']
        }),
        getMyNotifications:builder.query({
            query:()=>({
                url:"notif",
                credentials:'include'
            }),
            keepUnusedDataFor:0,
        })

        ,getMyProjects:builder.query({
            query:()=>({
                url:"projects/allProjects",
                credentials:'include'
            }),
            providesTags:['Projects']
        }),
        getSpecficProjectDetails:builder.query({
            query:(id)=>({
                url:`projects/${id}`,
                credentials:"include"
            }),
            providesTags:['Tasks','Projects']
        }),
        getProjectMembers:builder.mutation({
            query:(piroA)=>({
                url:'projects/projects/members',
                method:'POST',
                credentials:'include',
                body:piroA,
                headers:{
                    "Content-Type":"application/json"
                }
            })
        }),
        addTask:builder.mutation({
            query:(tasky)=>({
                url:'task/createTask',
                method:'POST',
                credentials:'include',
                body:tasky,
                headers:{
                    "Content-Type":"application/json"
                }
            }),
            invalidatesTags:['Tasks']
        }),
        getMyTasks:builder.query({
            query:()=>({
                url:"task/mytasks",
                credentials:'include'
            }),
            providesTags: ["Tasks"],
        }),
        getMyTaskDetails:builder.query({
            query:(id)=>({
                url:`task/${id}`,
                credentials:'include'
            }),
            providesTags:["Tasks"]
        }),
        editTask:builder.mutation({
            query:({id,edit})=>({
                url:`task/edit/${id}`,
                method:'POST',
                credentials:'include',
                body:edit,
                headers:{
                    "Content-Type":"application/json"
                }
            }),
            invalidatesTags:['Tasks','Projects']
        }),
        editProject:builder.mutation({
            query:({id,edit})=>({
                url:`projects/p/${id}`,
                method:'POST',
                credentials:'include',
                body:edit,
                headers:{
                    "Content-Type":"application/json"
                }
            }),
            invalidatesTags:['Projects']
        }),
        getSubmittedTask:builder.query({
            query:({taskId})=>({
                url:`task/submissionFiles/${taskId}`,
                credentials:"include"
            })
        }),
        getProjectSpecificTask:builder.mutation({
            query:({projectId,q})=>
               {
                console.log("api",projectId)
                console.log("api",q)
                return {url:`task/projectTask?q=${q}`,
                method:"POST",
                headers:{
                    "Content-Type":"application/json"
                },
                credentials:"include",
                body:JSON.stringify({projectId})}
            }
        }),
        getMyGroups:builder.query({
            query:()=>({
                url:'chats/myChats',
                credentials:'include'
            }),
            providesTags:['Chat']
        }),
        getOldMsgs:builder.query({
            query:({chatId})=>({
                url:`chats/message/${chatId}`,
                credentials:'include'
            }),
            keepUnusedDataFor:0
        }),
        getSpecificChatDetails:builder.query({
            query:({chatId})=>({
                url:`chats/specficChat/${chatId}`,
                credentials:'include'
            }),
            providesTags:['Chat']
        }),
        getTasksComment:builder.query({
            query:({id})=>({
                url:`comments/${id}`,
                credentials:'include'
            }),
            providesTags:['Comment']
        }),
        getDashboardStats:builder.query({
            query:()=>({
                url:"dashStats",
                credentials:'include',
            })
        }),
        getAdminDashboardStats:builder.query({
            query:()=>({
                url:"admin/dashyS",
                credentials:'include'
            })
        }),
        getAdminUserTasks:builder.query({
            query:()=>({
                url:"admin/userTasks",
                credentials:'include'
            })
        }),
        

    })
})

export default api;

export const {
    useGetAllMembersQuery,useAddNewProjectMutation,
    useGetMyProjectsQuery,useGetSpecficProjectDetailsQuery,
    useGetProjectMembersMutation,useAddTaskMutation,useGetMyTasksQuery,
    useGetMyTaskDetailsQuery,useEditTaskMutation,useEditProjectMutation,
    useGetSubmittedTaskQuery,useGetProjectSpecificTaskMutation,
    useGetMyNotificationsQuery,useGetMyGroupsQuery,useGetOldMsgsQuery,
    useGetSpecificChatDetailsQuery,useGetTasksCommentQuery,useGetDashboardStatsQuery,
    useGetAdminDashboardStatsQuery,useGetAdminUserTasksQuery
}=api